{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf340
\cocoascreenfonts1{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fnil\fcharset0 Menlo-Bold;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fnil\fcharset0 Menlo-Italic;\f4\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red153\green0\blue0;\red23\green127\blue128;\red72\green83\blue135;
}
\deftab480
\pard\pardeftab480\pardirnatural

\f0\fs36 \cf0 If the MIMSY_FTEST environment variable is set then, on startup, Mimsy will add a Test menu to the menubar containing menu items to run all tests or an individual test. The tests are *.lua files within MIMSY_FTEST or a sub-directory of MIMSY_FTEST. \
\
Note that making the environment variable available to Mimsy in Mountain Lion is a bit tricky. You can set it via Xcode's manage schemes dialog box or export it from the command line (and use the command line to launch Mimsy).\
\
In general the tests don't aim for 100% code coverage. But there should be tests for seldomly used features (e.g. loading UTF-32 files) and for non-obvious failure modes (e.g. memory leaks).\
\
Functional tests often interact with the GUI by doing things like opening and closing windows. Unfortunately these are often not blocking operations: they don't complete until the event loop has had a chance to run. So functional tests are required to explicitly signal when they have finished running via a call to ftest:passed, ftest:failed, or ftest:expecterror.\
\
Standard tables are provided to interact with Mimsy (see Lua Scripting) but functional tests have an additional table available via the ftest global:\
\
\pard\pardeftab480\pardirnatural

\f1\b\fs32 \cf0 function
\f2\b0  
\f1\b \cf2 passed
\f2\b0 \cf0 (
\f3\i \cf3 ftest
\f2\i0 \cf0 )\
\pard\pardeftab480\pardirnatural

\f0\fs36 \cf0 If no errors were written to the transcript then the test successfully completes. Otherwise it completes with an error.\
\
\pard\pardeftab480\pardirnatural

\f1\b\fs32 \cf0 function
\f2\b0  
\f1\b \cf2 failed
\f2\b0 \cf0 (
\f3\i \cf3 ftest
\f2\i0 \cf0 , 
\f3\i \cf3 reason
\f2\i0 \cf0 )\
\pard\pardeftab480\pardirnatural

\f0\fs36 \cf0 Indicates that the test has completed with an error.\
\
\pard\pardeftab480\pardirnatural

\f1\b\fs32 \cf0 function
\f2\b0  
\f1\b \cf2 expecterror
\f2\b0 \cf0 (
\f3\i \cf3 ftest
\f2\i0 \cf0 , 
\f3\i \cf3 mesg
\f2\i0 \cf0 )\
\pard\pardeftab480\pardirnatural

\f0\fs36 \cf0 If mesg was written to the transcript as an error then the test completes successfully
\f4\fs24 . 
\f0\fs36 Otherwise it completes with an error
\f4\fs24 .
\f0\fs36 \
\
\pard\pardeftab480\pardirnatural

\f1\b\fs32 \cf0 function
\f2\b0  
\f1\b \cf2 mallocstats
\f2\b0 \cf0 (
\f3\i \cf3 ftest
\f2\i0 \cf0 ) -> 
\f1\b \cf4 int
\f2\b0 \cf0 , 
\f1\b \cf4 int
\f2\b0 \cf0 , 
\f1\b \cf4 int
\f2\b0 \cf0 \
\pard\pardeftab480\pardirnatural

\f0\fs36 \cf0 Returns the number of malloc allocated blocks, the number of allocated bytes, and the maximum number of allocated bytes.\
\
\pard\pardeftab480\pardirnatural

\f1\b\fs32 \cf0 function
\f2\b0  
\f1\b \cf2 instancecount
\f2\b0 \cf0 (
\f3\i \cf3 ftest
\f2\i0 \cf0 , 
\f3\i \cf3 name
\f2\i0 \cf0 ) -> 
\f1\b \cf4 int
\f2\b0 \cf0 \
\pard\pardeftab480\pardirnatural

\f0\fs36 \cf0 Returns the number of instantiated objects with the specified name. Name can be 'TextController' or 'TextDocument'. If no objects with the specified name were created zero is returned
\f4\fs24 .
\f0\fs36 \
\
}