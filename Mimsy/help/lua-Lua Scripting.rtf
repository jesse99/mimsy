{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf340
\cocoascreenfonts1{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red153\green0\blue0;\red23\green127\blue128;\red209\green8\blue70;
\red72\green83\blue135;}
\deftab480
\pard\pardeftab480\pardirnatural

\f0\fs36 \cf0 Currently Lua scripts only run as part of functional tests. In the future there will be a way to load Lua scripts on startup and possibly via context menus.\
\
Mimsy adds a global called 'app' to all Lua environments. The other tables listed below are available directly or indirectly via the app global.\
\
Methods taking color names accept CSS3 color names ("Dark Green"), VIM 7.3 names ("gray50"), hex RGB or RGBA values ("#FF0000" or "#FF0000FF"), and decimal RGB or RGBA values ("(255, 0, 0)" or "(255, 0, 0, 255)"). Text document methods also accept "back color" and colors from the active style file ("keyword color"). Spaces and case differences are ignored.\
\pard\pardeftab480\pardirnatural

\fs32 \cf0 \

\b\fs72 app\

\b0\fs32 \

\b\fs36 function
\b0  
\b \cf2 log
\b0 \cf0 (
\i \cf3 app, mesg
\i0 \cf0 )\
Writes a message to the log using the \cf4 'Mimsy'\cf0  topic and Info level.\
\

\b function
\b0  
\b \cf2 newdoc
\b0 \cf0 (
\i \cf3 app
\i0 \cf0 ) -> 
\i \cf3 textdoc
\i0 \cf0 \
Opens a new untitled text document.\
\

\b function
\b0  
\b \cf2 openfile
\b0 \cf0 (
\i \cf3 app, path, success 
\i0 \cf0 =
\i \cf3  
\i0\b \cf0 nil
\i\b0 \cf3 , failure 
\i0 \cf0 =
\i \cf3  
\i0\b \cf0 nil
\b0 )\
Attempts to open the file specified by path as a Mimsy document. If successful and success is not nil then it is called with a textdoc argument. If the document could not be opened and failure is not nil then it is called with a string explaining why.\
\
Note that, in general, the callbacks will not be invoked until the event loop is re-entered (this applies to all the methods that take success and failure callbacks).\
\

\b function
\b0  
\b \cf2 schedule
\b0 \cf0 (
\i \cf3 app
\i0 \cf0 , 
\i \cf3 secs
\i0 \cf0 , 
\i \cf3 callback
\i0 \cf0 )\
Calls callback after the specified number of seconds have elapsed. Secs can be an integer or a float, callback must be the name of a function.\

\fs32 \

\b\fs72 textdoc\

\b0\fs32 \

\b\fs36 function
\b0  
\b \cf2 close
\b0 \cf0 (
\i \cf3 textdoc
\i0 \cf0 )\
Closes the document window and disposes of the document. The textdoc should not be used after this is called. \

\b \
\pard\pardeftab480\pardirnatural
\cf0 function
\b0  
\b \cf2 data
\b0 \cf0 (
\i \cf3 textdoc
\i0 \cf0 ) -> 
\i \cf3 text
\i0 \cf0 \
Returns the text of the document as a UTF-8 string. \
\
\pard\pardeftab480\pardirnatural

\b \cf0 function
\b0  
\b \cf2 getselection
\b0 \cf0 (
\i \cf3 textdoc
\i0 \cf0 ) -> 
\i \cf3 loc
\i0 \cf0 ,
\b \cf5  
\i\b0 \cf3 len
\i0 \cf0 \
Returns the location and length of the current selection (or insertion point if there is no selection). \
\

\b function
\b0  
\b \cf2 saveas
\b0 \cf0 (
\i \cf3 textdoc
\i0 \cf0 , 
\i \cf3 path
\i0 \cf0 , 
\i \cf3 type 
\i0 \cf0 =
\i \cf3  
\i0\b \cf0 nil
\b0 , 
\i \cf3 success 
\i0 \cf0 =
\i \cf3  
\i0\b \cf0 nil
\b0 , 
\i \cf3 failure 
\i0 \cf0 =
\i \cf3  
\i0\b \cf0 nil
\b0 )\
Saves the document to the specified path. Type can be any of the following:\
\'95\'a0\cf4 'Plain Text, UTF8 Encoded'\cf0  this is the default.\
\'95\'a0\cf4 'Plain Text, UTF16 Encoded'\cf0 \
\'95\'a0\cf4 'HTML'\cf0  this is a rich text format: font and style information are encoded into the generated HTML.\
\'95\'a0\cf4 'Rich Text Format (RTF)'\cf0 \
\'95\'a0\cf4 'Word 97 Format (doc)'\cf0 \
\'95\'a0\cf4 'Word 2007 Format (docx)'\cf0 \
\'95\'a0\cf4 'Open Document Text (odt)'\cf0 \
\
\pard\pardeftab480\pardirnatural

\b \cf0 function
\b0  
\b \cf2 setselection
\b0 \cf0 (
\i \cf3 textdoc
\i0 \cf0 ,
\i \cf3  loc
\i0 \cf0 ,
\i \cf3  len
\i0 \cf0 )\
Sets the current selection (or insertion point if len is zero). Loc must be in [0, data.length). Len must be non-negative. Loc+len must be <= data.length. \
\

\b function
\b0  
\b \cf2 setunderline
\b0 \cf0 (
\i \cf3 textdoc
\i0 \cf0 , 
\i \cf3 loc
\i0 \cf0 , 
\i \cf3 len
\i0 \cf0 , 
\i \cf3 style 
\i0 \cf0 =
\i \cf3  
\i0 \cf4 'single'\cf0 , 
\i \cf3 pattern 
\i0 \cf0 =
\i \cf3  
\i0 \cf4 'solid'\cf0 , 
\i \cf3 color 
\i0 \cf0 =
\i \cf3  
\i0\b \cf0 nil
\b0 )\
Style may be \cf4 'none'\cf0 , \cf4 'single'\cf0 , \cf4 'thick'\cf0 , or \cf4 'double'\cf0 .\
Pattern may be \cf4 'solid'\cf0 , \cf4 'dot'\cf0 , \cf4 'dash'\cf0 , \cf4 'dashdot'\cf0 , or \cf4 'dashdotdot'\cf0 .\
}