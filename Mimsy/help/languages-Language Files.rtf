{\rtf1\ansi\ansicpg1252\cocoartf1344\cocoasubrtf720
{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red24\green123\blue11;\red255\green0\blue0;}
\viewkind0
\deftab480
\pard\pardeftab480\pardirnatural

\f0\fs36 \cf0 The language files are used to do syntax hilighting for text files and to control what qualifies as a word for operations like double-clicking. Language globs are patterns used to associate a file with a language. Typically they are the exact name of a file (\cf2 'Makefile'\cf0 ) or based on the file's extension (\cf2 '*.cs'\cf0 ).\
\
These settings can also override app settings in directory .app.mimsy files which override the global app.mimsy file. There's not much point in overriding most app settings in a language file, but one exception is the SearchIn setting. Adding this to a language file makes it easy to search language specific web sites for the current selection.\
\
New languages can be added to the user directory. Languages are defined using a simple line-based file format consisting of settings and elements. The settings configure various aspects of the language and the elements affect highlighting.\
\
The settings are:\
\pard\pardeftab480\pardirnatural

\b \cf0 Language
\b0 : is the name of the language. By convention this is lower case. This is a required setting.\
\

\b Globs
\b0 : is a space separated list of file name globs associated with the language. This is a required setting.\
\

\b ConditionalGlob
\b0 : consists of a glob, followed by a space, followed by a regex. Files will use the language if the glob matches the file name and the regex matches something in the contents. Languages where a ConditionalGlob matches will be used instead of languages where just a Glob matches.\
\

\b Shebang
\b0 : name of the associated tool appearing on a shebang line. May appear multiple times. This is an alternative way to associate files with a language. \cf3 Not implemented yet.\cf0 \
\

\b IgnoreWhitespace
\b0 : if this is true then leading and trailing whitespace is not highlighted. Defaults to false. \cf3 Not implemented yet.\cf0 \
\

\b LineComment
\b0 : is used with the toggle comments command.\

\b \
Help
\b0 : are URLs added to the Help menu when the main window matches this language.\
\

\b Shebangs
\b0 : space separated list of shebangs associated with the language, eg sh ksh csh bash. This allows files written in the language to be highlighted even if they don't have a matching glob. \cf3 Not implemented yet.\cf0 \
\

\b SpacesNotTabs
\b0 : if true spaces are inserted instead of tabs. If present this will override the directory editor preference. \cf3 Not implemented yet.\cf0 \
\

\b TabStops
\b0 : space separated list of integral tab stops. This overrides the normal tab stops set in the preferences panel and is useful for languages that have fixed columns (like disassembled code). \cf3 Not implemented yet.\cf0 \
\

\b Word
\b0 : a regex that indicates what a word (aka identifier) means in the language. Generally this only needs to be used if the language allows Unicode or unusual characters (like \cf2 '-'\cf0  or \cf2 ':'\cf0 ) in identifiers. If missing it defaults to \cf2 [\\p\{Ll\}\\p\{Lu\}\\p\{Lt\}\\p\{Lo\}_][\\w_]*\cf0 , i.e. a Unicode letter or underscore followed by zero or more Unicode letters/digits/underscores.\
\
Elements may have arbitrary names and use NSRegularExpression. If the element matches source code then that source code is styled using the font attributes from the associated element in one of the Styles rtf files. All regexen use the following options: NSRegularExpressionAllowCommentsAndWhitespace | NSRegularExpressionAnchorsMatchLines (whitespace is ignored within patterns and ^/$ match the start/end of lines).\
\
Commonly used meta-characters include:\
	\\b			Match if the current position is a word boundary\
	\\d \\D		Match a decimal digit (or the inverse)\
	\\s \\S		Match whitespace (or the inverse)\
	\\w \\W		Match a word character (or the inverse)\
	\\xN \\uN	Match 2-digit ASCII (or 4-digit Unicode)\
\
Commonly used operators include:\
	e*?		Match zero or more times, matching as few as possible.\
	e+?		Match one or more times, matching as few as possible.\
	(e)			capturing group\
	(?: e)		non-capturing group\
	(?= e)		zero-width positive look ahead assertion\
	(?! e)		zero-width negative look ahead assertion\
	(?<= e)	zero-width positive look behind assertion (must be bounded: no * or + operators)\
	(?<! e)	zero-width negative look behind assertion (must be bounded: no * or + operators)\
	\
The regular expressions are applied in the order that they are declared. If the expression includes a capturing group then that capture is styled; this can be used to work around the limitation that look behind assertions must be bounded. If a later regular expression match intersects an earlier regex then the later match is ignored.\
\
Changes to language files are dynamic: the prefs panel and text documents will both update when a lang file is saved. \
\
}