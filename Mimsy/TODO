tail -f ~/Library/Logs/mimsy.log


* Toggle comment would be really nice.
* Directory view window is collapsing open items:
	- try running R scripts in samplers
* Save sometimes screwed up line endings
	- wound up adding lots of extra new lines
	- probably had a file with mixed line endings
* Getting a warning (I think) because layout is being dirtied inside layput
	- happens when double clicking on a find in files result

* After typing a closing brace the wrong open brace is highlighted.
* Add tab stops 
	- they get screwed up now for things like tabbing to add comments to long lines)
	  e.g. replaceSelection in TextEditorView.cs
* Get option-tab working
	- should probably use identifier style
	but look at Continuum styler (and maybe some others)
	- update special keys help file
* Probably should sanitize pastes to strip line feeds and other bogus control characters.
* Help looks busted
* Transforms are added to context menu but not main menu.
* Layout was super slow with a large file (ping-large.R)
* Nothing happened when double clicking a nib file.
* Use a Mimsy header:
	- include assert and logger
	- include a couple categories
	- include foundation
	- need to rename the log macros
       setLevel is buggy too
* Look at OS changes.
* Look at identifier styling
	- do we even want it?
	- think continuum style looks icky when it is used
* Use alertWithError where we don't just write to the transcript.
* Experiment with a different proc-file based design:
	- extensions use json messages and replies to get notifications (including event processing), to register for notifications, and to issue commands (eg select a string from a list)
	- state is exposed to extensions via proc files
	- some proc files are writeable, eg selection range
	- some proc files are links, eg main window
	- plugins are objective-c (or swift)
	- notifications should support some sort of granulatirity option
	- would be really cool to have an extenion that maintains the function popup menu
		` probably want a proc file with function menu items
		` maybe settings that control regex to use per file type
		` could use this to keep an index for the larger help files
	- could have extensions to add some sort of chrome
		` replace chars with unicode smbols
		` load image files
		` add links to local (relative path) files
		` will need menu item to turn chrome off
		` how do we handle saving? some magic attribute?

	- state is exposed via files
	- stuff like settings are exposed as individual files (array like settings may ave multiple lines)
	- plugins directory
	- install needs to install plugin files as well
	- control can be done via plugin stdin and stdout
	- maybe plugins could write lua to control mimsy
	  replies could be json
	- plugins with a UI could be objc
* Might be nice if directory window styled dirty windows somehow
	- maybe back color
* Tabs don't work correctly
	- can see this by doing a find all for TODO in gnos
* Directory windows need to appear in bold in the window menu.
* Look into supporting code folding:
	- maybe just fold selections
	- click could unfold
	- NSGlyphInfoAttributeName looks like it might be good
	- glyph should be a setting
      Open Book
      Right-Pointing Magnifying Glass
	- getting glyphs
	  http://www.cocoabuilder.com/archive/cocoa/102837-getting-glyphs-and-their-outlines.html
	  http://www.cocoabuilder.com/archive/cocoa/22415-how-to-get-glyph-from-character.html
	  http://partners.adobe.com/public/developer/en/opentype/glyphlist.txt
	- maybe a command to unfold all
* Could use NSGlyphInfoAttributeName to re-render special chars?
	- python colons
	- rust arrows, matches
	- braces
	- maybe characters (or regexen) not in string or comment
* Support goto line
* Meson (build system)
	- like CMake but saner
	- easy to integrate with an IDE (see https://github.com/jpakkane/meson/wiki/IDE%20integration)
* Linters or other static analyzers might be cool.
* Setting back color of a styles file didn't seem to change the text.
	- nonone of the styles file changes are live
	- can we watch the file?
* Support remote editing
	- might be simplest to just have a Python script running remotely
	- contents could be zipped and binhexed
* Might want a help window dedidated to just special keys
	- for both text windows and the directory window
	- maybe for the app as well (ie window navigation)
	- would be great if some help file explained what the glyphs for special keys (like control) are (note that there are unicode characters for these, see https://news.ycombinator.com/item?id=7752257)
	- also point them to shortcuts tab in keyboard system prefs
* Would be cool if there was a way to configure command keys:
	- maybe mimsy file or lua script
	- or can users do this using shortcuts tab in ketboard system prefs?
	- if so document how to do that
	- http://mattgemmell.com/mac-keyboard-shortcuts/
* Make sure the most important emacs keys work:
	- control-a, control-e, control-u
	- probably want to document these
* Document fancy open recent:
	- command-tab, then up or down arrow and release
	- might want a help file for hidden mac features
* Can we use map kit to navigate code?
* Support option-tab
	- be sure to document this
* Need to special case double-click selections according to the language
	- eg most languages should not treat period as a word character
* Support some of the text commands:
	- show tabs
	- toggle comments
* Would be nice to have some sort of show invisibles command:
	- or maybe generic replace char with char command
	- could use a setting to control mappings
	- probably need an NSLayoutManager subclass, see http://stackoverflow.com/questions/300086/display-hidden-characters-in-nstextview
* Add show leading spaces and show leading tabs commands:
	- perist them in a pref
	  may want to make this a project pref
	  maybe even support per-file overrides
	  emacs (and vim?) support prefs as meta-data within files
	- regex styler should make use of them
	- add show interior tabs?
* Special case arrow keys
* Special case delete key
* Maybe also a short view:
	- remove function bodies
	- possibly format doc comments
* Add a command line app to open files in mimsy
* Would be great if there was a way to skip backward and forward between selections.
	- xcode uses command-control left and right arrows
* Jump to selection would also be nice
* http://www.emacswiki.org/emacs/uniquify looks neat
* Add a little view with line and col numbers.
	- clicking on this shoould work as a goto line
	- maybe even support 1:100 syntax to goto line and col
	- probably want to document this
	- don't bother with a metrics class
	- instead schedule main thread find line number
	  after an edit push back schedule time 1s
* Could add some simple find definition support by relying on the styler:
	- directory watcher and a task are used to maintain a cache
	- project pref could have paths to dependencies, eg cocoa headers
	- might be a bit problematic for languages with overloading
	- may want to mention in docs that definition style serves two purposes
	- lua hooks could allow for more sophisticated implementations (eg for clang)
* May want to extend languages to support bad tokens
	- e.g. || and && in Python
* Support named bookmarks.
* May need to call the below when switching to Maverics:
	- setAutomaticQuoteSubstitutionEnabled
	- setAutomaticDashSubstitutionEnabled
* NSSavePanel has an opt-in for tagging
	- https://developer.apple.com/library/mac/releasenotes/AppKit/RN-AppKit/index.html#//apple_ref/doc/uid/TP30000741
* NSDocument has export as pdf support in Mavericks
* Some sort of placeholder support would be nice too:
	- maybe something like a bookmarks window
* Should there be scripts associated with directory windows?
	- copy and rename?
	- add C file?
	- git helpers?
	- diff?
* Would be nice to have a script to warn when lines are over 78 chars
	- probably disabled by default
	- or do nothing unless a setting is set
	- directory settings file would need entries for custom settings
* Update xcode
	- see whats changed in cocoa
* Might be neat to have a small font brace line addon.
* Make sure directory window shows the mimsy file
	- may want a setting for files to always show
	- or a setting for files to hide?
* Get builds working:
	- probably want project settings file to have target black list
	- support build variables
		do builders really need to provide this?
		can't the settings file just list env vars to set?
	- implement a waf builder
	- maybe an xcode builder
* Add support for extracting error info from tools	
	should use settings files (or maybe lua scripts)
	build docs should probably reference this
	look at VIM: /usr/share/vim/vim73/compiler/gcc.vim
	error formats use scanf syntax
	        %f              file name (finds a string)
	        %l              line number (finds a number)
	        %c              column number (finds a number representing character
	                        column of the error, (1 <tab> == 1 character column))
	        %v              virtual column number (finds a number representing
	                        screen column of the error (1 <tab> == 8 screen
	                        columns))
	        %t              error type (finds a single character)
	        %n              error number (finds a number)
	        %m              error message (finds a string)
	        %r              matches the "rest" of a single-line file message %O/P/Q
	        %p              pointer line (finds a sequence of '-', '.' or ' ' and
	                        uses the length for the column number)
	        %*{conv}        any scanf non-assignable conversion
	        %%              the single '%' character
	        %s              search text (finds a string)
	        see :help errorformat
	        http://vim.wikia.com/wiki/Errorformats
	builds need to call reloadIfChanged
	build menu should rebuild if the dir changes
* Maybe can use rustc --parse-syntax in a script to highlight errors
* Might want Run and Test commands (run different targets).
* Build menu should reload if build file changes.
* Work on building:
	- might be able to use vim files, eg /usr/share/vim/vim73/compiler/gcc.vim
* Make sure builds call reloadIfChanged
* Should have some sort of field to use when toggling between header and C files:
	- maybe also stuff like .html and .css and .js
* Work on generators
	- provides a way to generate new files based on old files
	- maybe sub-directories for stuff like git or whatever
	- would need some fast pre-flighting if used with context menus
	  maybe could cache result of preflight when the file is opened
	- new file template
	- time machine (tmutil has stuff like compare and restore)
	- directories can have an optional preflight script
	- when closing a doc need to delete the file if its in /tmp
	- might want some sort of short form and linter and maybe compiler
* Work on styling:
	- add some sort of search key
		can appear multiple times
		augments context menu
		will need to bump build number
	- add a pref for extensions to languages
	- make sure pref has a button to open the dir with the vim files
	- may be able to do something with NSLinkAttributeName
	- probably should have a way to have fallback element name aliases
	- would be nice if there was a way to show which elements text ranges belong to
		could do this by adding a "style name" attribute
* Work on directory window hooks:
	- styling
	- text annotations
	- context menu
	- tooltips (NSOutlineView has support for these)
* Would be neat to have a script to highlight commonly used files:
	- maybe add bullets to the name
	- last N most recently used? quartiles?
	- credit don
* Context menu should maybe use a hueristic to add open (local) files based on selection name:
	- maybe also scripts to update context menu using function and type info from styling or parsing
* Open selection should be able to open directories.
* Would be nice to have a way to create new files:
	- option-N pops up a list users can choose from
	- remember last selection
	- probably mustache (and maybe also arbitrary scripts)
	- mustache could have templates for things like user name, year, maybe custom settings
	- scripts could have a mode to tell mimsy what they need (eg class name)
	- could do similar thing to support inserting language elements
	- may want a way to disable these, maybe it is present but ignored if wrapped in parens
	- could include build scripts (eg C Makefile)
* Maybe handle common extension points via external files:
	- for build systems Python script returning
		` build file (mimsy will watch for changes to this file)
		` targets
		` command lines for the targets
	- for tools declarative file with
		` regex for errors
		` regex for warnings
		` mapping from group number to standard categories like file, line, col
	- language files need to include search URL
	- would be nice to do something for SCCSs
* Language files should have support for a run key:
	- value is command line used to run a single file (or *.c file for C based languages)
	- probably triggered by option-R
	- will need to include this in shortcuts (could start this file before hooking it up)
	  or 'Run <Window Name>' menu command
	- need to hook into build error infrastructure
	- possibly also syntax check command
* May want a script/context menu to open github page associated with current file.
* Once we get Windows menu working better will probably want to add a Show Transcript menu item.
* Add support for snippets:
	- probably a directory with them
	- maybe sub-directories with each directory a language name
	- maybe context menu to insert
	- would be nice to be able to prompt for strings
	- might want to allow lua snippets for more logic
	- should be per language
	- maybe both text and script based (or possibly scripts are refactors)
* git modified file indicator is nice.
* Need to add support for a bunch more languages.
* Experiment with code folding:
	- need a language regex or string to indicate range start and end
	- probably want to just toggle folding on and off
	- doesn't appear to be a good way to do this just by mucking with visuals
	- one possibility is to switch to a 1pt font
	  would preserve line numbers and make it simple to do things like search or process the text
	- show range (eg for find) would need to auto-unfold
* Do something with the About box.
* The suggestions that XCode provides when there are errors are pretty cool.
* Might want to cache styles:
	- its fairly common to open and close large source files
	- probably want some logging for how large the cache gets
* Do something special with file rename when a SCCS is present. Also delete.
- maybe lua hooks
* Should have a mode where tab uses tab at the start of lines, but spaces once the line starts.
* Might also want to use that wacky VIM(?) meta-data embedded in files containing info like tab lengths
	- or support a dot file that does the same thing
* Might be cool to replace some strings on load/save:
	- -> and => to unicode arrows
	- :: to something
	- probably would also have to do this during editing
* Get searching in help files working.
* Info window should have a popup to override default styler file.
* Maybe could have an option to get rid of tabs altogether
	- tab adds enough spaces to offset to a modulo-N column
	- backspace gobbles N spaces where possible
	- would this work with proportional fonts?
	- optionally allow tabs at the start of lines
* Would be nice if there was a way to hide "chrome":
	- mostly helper windows, like find panels and recent files
	- maybe also directory windows
	- maybe all the chrome could be toggled via control key, then could use control-k to toggle chrome
* Is there an API to get reference docs from Apple?
	- from rust?
	- could add lua (or maybe arbotrary) per language scripts
	- could then do something like xcode's doc window
* Would be nice to have some sort of indication of dirty files:
	- probably from git's perspective
* XCode and (I guess) TextMate have a bunch of macros:
	- type some abreviation, hit escape, and they are expanded
* Might want to add to the app store:
	- see what the policy is for open source apps
	- look at Prepare for Mac App Store Submission link
* History of cursor positions?
* Release checklist:
	- review log topics
	- need to add a license agreement somewhere
	- might have to add a lame build step to archive build to copy the styles files a second time
	- make sure that the binary works on someone elses mac
	- increment support files version number, also build scripts version numbers
	- ship the release version
	
	
	