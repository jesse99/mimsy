tail -f ~/Library/Logs/mimsy.log

install http://osxfuse.github.io/
	can skip this but a lot of features will be disabled
	see http://osxbook.com/blog/2009/03/02/why-macfuse-installation-recommends-a-reboot/

http://www.learnswift.tips/




* Work on a way to override styles:
    - update docs: longest regexes should be listed first, can use (one) group, use a group where you would otherwise use an unbounded look-behind assertion
    - do a commit
* Double clicking IEEE80211_STYPE_ACTION sucks
* Need an extension to toggle between headers and source files.
* Simplest to use background color instead of glyphs: see http://asciiwwdc.com/2010/sessions/114
    - show trailing spaces
    - need a way to add menu items
    - gracefuly handle unloaded extensions
    - add a note about substituting glyphs
    - show return characters
    - show control characters
    - show tabs
    - show spaces
    - 80 char line limit
        ideally using a setting
    - maybe some common errors (like using the wrong comment characters)
* Local search should try all open projects before doing a global search.
* Editor features: http://texteditors.org/cgi-bin/wiki.pl?HomePage
* Get remote builds working:
    remote-test:
    ssh jjones@10.4.0.128 'make package/coco-mesh-minder/{compile,install} V=1 && scp bin/rb433-chaos/packages/coco/coco-mesh-minder_1_ar71xx.ipk root@192.168.6.11:/tmp && ssh root@192.168.6.11 "opkg install /tmp/coco-mesh-minder_1_ar71xx.ipk"'
    - probably need to set USER and maybe HOME
    - probably need to special case file matching
      if no match do a local search for the file name
* Experiment with a different proc-file based design:
    - could have extensions to add some sort of chrome
        ` load image files
        ` add links to local (relative path) files
        ` will need menu item to turn chrome off
        ` how do we handle saving? some magic attribute?
    - show proc files.rtf somehow, maybe a components menu
    - remove startup scripts
    - if FUSE for OSX is not installed disable extensions
* Try and get functions working with C
    - might have to do something lame like line starts wih non-whitespace+word+(+anything not )+)+whitespace+{
      how do we gobble up the chars before the word? non-greedy kleene?
    - maybe structs too
* Should be a way for extensions to override styles:
    - 89 char lines (or use a setting for the limit)
    - pjlib types
* May want to add a command line helper
* Modern objc: https://developer.apple.com/library/Mac/releasenotes/ObjectiveC/ModernizationObjC/AdoptingModernObjective-C/AdoptingModernObjective-C.html#//apple_ref/doc/uid/TP40014150
* OSXFUSE is releasing version 3.0 soon (can update via system preferences).
* Should be able to double click in find in time machine.
* Add a go extension for search on sites:
	- will need language proc files
	- will need an open-url proc file
	- need to shutdown executable extensions on exit
* NSString adds an API that can be used to detect the string encoding of an array of bytes
* Need an extension (or an option) to show a line at N characters.
* Tab handling is sketchy.
* Would be great to get something working for C functions and structs.
* Use FUSE to enable remote editing.
* Can tag files, for searching? Color coding? NSURLTagNamesKey
    - maybe a context menu item
* Add go to search for a file:
	- color code and location column
	- locations are current project, open windows, open projects, global
	- support fuzzy searches
	- weight column for how close the match is
	- for menus could have a jsonfile describing menus
	for edits have an op field that could be "add" or "remove"
* Redo transforms?
* Add tab stops
	- they get screwed up now for things like tabbing to add comments to long lines)
	  e.g. replaceSelection in TextEditorView.cs
* Look at identifier styling
	- do we even want it? yes, for stuff like option-tab
	- think continuum style looks icky when it is used
* Delimter style doesn't work
    - can see this with open as binary
    - probably need custom code in the styler
    - few other styles have similar issues
* Add some directory editor git extensions:
    - diff
    - checkout
    - blame
    - log
* Might want stuff like dissasemble too
* Pick something to use for a plugin:
    - loading plugins: https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/LoadingCode/Tasks/UsingPlugins.html#//apple_ref/doc/uid/20001276-100982
    - should plugins go into ~/Library/Application Support/applicationSupportDirectory/PlugIns?
    - probably need a protocol that plugins must implement
        ` load, unload, settingsChanged (or maybe they can listen)
    - will need to do something for building
    maybe separate projects
    could have a make file to build em all
    - need some docs on writing plugins (and probably extensions)
* May want a language option to force monospace
    - useful with open as binary
* Use alertWithError where we don't just write to the transcript.
* Should be something to manage extensions:
	- see what is installed
	- uinstall
	- install
	- search
	- great if it could install from a repo
* Might be nice if directory window styled dirty windows somehow
	- maybe back color
* Tabs don't work correctly
	- can see this by doing a find all for TODO in gnos
* Nothing happened when double clicking a nib file.
* Directory windows need to appear in bold in the window menu.
* Directory view window is collapsing open items:
	- try running R scripts in samplers
	- seems to be happening with root items
* Look into supporting code folding:
	- maybe just fold selections
	- click could unfold
	- NSGlyphInfoAttributeName looks like it might be good
	- glyph should be a setting
      Open Book
      Right-Pointing Magnifying Glass
	- getting glyphs
	  http://www.cocoabuilder.com/archive/cocoa/102837-getting-glyphs-and-their-outlines.html
	  http://www.cocoabuilder.com/archive/cocoa/22415-how-to-get-glyph-from-character.html
	  http://partners.adobe.com/public/developer/en/opentype/glyphlist.txt
	- maybe a command to unfold all
* Should have some proc files for rich text documents.
* Could use NSGlyphInfoAttributeName to re-render special chars?
	- python colons
	- rust arrows, matches
	- braces
	- maybe characters (or regexen) not in string or comment
* Support goto line
* Meson (build system)
	- like CMake but saner
	- easy to integrate with an IDE (see https://github.com/jpakkane/meson/wiki/IDE%20integration)
* Linters or other static analyzers might be cool.
* Setting back color of a styles file didn't seem to change the text.
	- nonone of the styles file changes are live
	- can we watch the file?
* Support remote editing
	- might be simplest to just have a Python script running remotely
	- contents could be zipped and binhexed
* Layout was super slow with a large file (ping-large.R)
* Might want a help window dedidated to just special keys
	- for both text windows and the directory window
	- maybe for the app as well (ie window navigation)
	- would be great if some help file explained what the glyphs for special keys (like control) are (note that there are unicode characters for these, see https://news.ycombinator.com/item?id=7752257)
	- also point them to shortcuts tab in keyboard system prefs
* Would be cool if there was a way to configure command keys:
	- maybe mimsy file or lua script
	- or can users do this using shortcuts tab in ketboard system prefs?
	- if so document how to do that
	- http://mattgemmell.com/mac-keyboard-shortcuts/
* Make sure the most important emacs keys work:
	- control-a, control-e, control-u
	- probably want to document these
* Document fancy open recent:
	- command-tab, then up or down arrow and release
	- might want a help file for hidden mac features
* Can we use map kit to navigate code?
* Support option-tab
	- be sure to document this
* Need to special case double-click selections according to the language
	- eg most languages should not treat period as a word character
* Support some of the text commands:
	- show tabs
	- toggle comments
* Would be nice to have some sort of show invisibles command:
	- or maybe generic replace char with char command
	- could use a setting to control mappings
	- probably need an NSLayoutManager subclass, see http://stackoverflow.com/questions/300086/display-hidden-characters-in-nstextview
* Add show leading spaces and show leading tabs commands:
	- perist them in a pref
	  may want to make this a project pref
	  maybe even support per-file overrides
	  emacs (and vim?) support prefs as meta-data within files
	- regex styler should make use of them
	- add show interior tabs?
* Special case arrow keys
* Special case delete key
* Maybe also a short view:
	- remove function bodies
	- possibly format doc comments
* Add a command line app to open files in mimsy
* Would be great if there was a way to skip backward and forward between selections.
	- xcode uses command-control left and right arrows
    - or maybe some sort of map or tree view showing old selections
    could even add bookmark support to this
* Jump to selection would also be nice
* http://www.emacswiki.org/emacs/uniquify looks neat
* Add a little view with line and col numbers.
	- clicking on this shoould work as a goto line
	- maybe even support 1:100 syntax to goto line and col
	- probably want to document this
	- don't bother with a metrics class
	- instead schedule main thread find line number
	  after an edit push back schedule time 1s
* Could add some simple find definition support by relying on the styler:
	- directory watcher and a task are used to maintain a cache
	- project pref could have paths to dependencies, eg cocoa headers
	- might be a bit problematic for languages with overloading
	- may want to mention in docs that definition style serves two purposes
	- lua hooks could allow for more sophisticated implementations (eg for clang)
* May want to extend languages to support bad tokens
	- e.g. || and && in Python
* Support named bookmarks.
* May need to call the below when switching to Maverics:
	- setAutomaticQuoteSubstitutionEnabled
	- setAutomaticDashSubstitutionEnabled
* NSSavePanel has an opt-in for tagging
	- https://developer.apple.com/library/mac/releasenotes/AppKit/RN-AppKit/index.html#//apple_ref/doc/uid/TP30000741
* NSDocument has export as pdf support in Mavericks
* Some sort of placeholder support would be nice too:
	- maybe something like a bookmarks window
* Should there be scripts associated with directory windows?
	- copy and rename?
	- add C file?
	- git helpers?
	- diff?
* Would be nice to have a script to warn when lines are over 78 chars
	- probably disabled by default
	- or do nothing unless a setting is set
	- directory settings file would need entries for custom settings
* Update xcode
	- see whats changed in cocoa
* Might be neat to have a small font brace line addon.
* Make sure directory window shows the mimsy file
	- may want a setting for files to always show
	- or a setting for files to hide?
* Get builds working:
	- probably want project settings file to have target black list
	- support build variables
		do builders really need to provide this?
		can't the settings file just list env vars to set?
	- implement a waf builder
	- maybe an xcode builder
* Add support for extracting error info from tools	
	should use settings files (or maybe lua scripts)
	build docs should probably reference this
	look at VIM: /usr/share/vim/vim73/compiler/gcc.vim
	error formats use scanf syntax
	        %f              file name (finds a string)
	        %l              line number (finds a number)
	        %c              column number (finds a number representing character
	                        column of the error, (1 <tab> == 1 character column))
	        %v              virtual column number (finds a number representing
	                        screen column of the error (1 <tab> == 8 screen
	                        columns))
	        %t              error type (finds a single character)
	        %n              error number (finds a number)
	        %m              error message (finds a string)
	        %r              matches the "rest" of a single-line file message %O/P/Q
	        %p              pointer line (finds a sequence of '-', '.' or ' ' and
	                        uses the length for the column number)
	        %*{conv}        any scanf non-assignable conversion
	        %%              the single '%' character
	        %s              search text (finds a string)
	        see :help errorformat
	        http://vim.wikia.com/wiki/Errorformats
	builds need to call reloadIfChanged
	build menu should rebuild if the dir changes
* Maybe can use rustc --parse-syntax in a script to highlight errors
* Might want Run and Test commands (run different targets).
* Build menu should reload if build file changes.
* Work on building:
	- might be able to use vim files, eg /usr/share/vim/vim73/compiler/gcc.vim
* Make sure builds call reloadIfChanged
* Should have some sort of field to use when toggling between header and C files:
	- maybe also stuff like .html and .css and .js
* Work on generators
	- provides a way to generate new files based on old files
	- maybe sub-directories for stuff like git or whatever
	- would need some fast pre-flighting if used with context menus
	  maybe could cache result of preflight when the file is opened
	- new file template
	- time machine (tmutil has stuff like compare and restore)
	- directories can have an optional preflight script
	- when closing a doc need to delete the file if its in /tmp
	- might want some sort of short form and linter and maybe compiler
* Work on styling:
	- add some sort of search key
		can appear multiple times
		augments context menu
		will need to bump build number
	- add a pref for extensions to languages
	- make sure pref has a button to open the dir with the vim files
	- may be able to do something with NSLinkAttributeName
	- probably should have a way to have fallback element name aliases
	- would be nice if there was a way to show which elements text ranges belong to
		could do this by adding a "style name" attribute
* Work on directory window hooks:
	- styling
	- text annotations
	- context menu
	- tooltips (NSOutlineView has support for these)
* Would be neat to have a script to highlight commonly used files:
	- maybe add bullets to the name
	- last N most recently used? quartiles?
	- credit don
* Context menu should maybe use a hueristic to add open (local) files based on selection name:
	- maybe also scripts to update context menu using function and type info from styling or parsing
* Open selection should be able to open directories.
* Would be nice to have a way to create new files:
	- option-N pops up a list users can choose from
	- remember last selection
	- probably mustache (and maybe also arbitrary scripts)
	- mustache could have templates for things like user name, year, maybe custom settings
	- scripts could have a mode to tell mimsy what they need (eg class name)
	- could do similar thing to support inserting language elements
	- may want a way to disable these, maybe it is present but ignored if wrapped in parens
	- could include build scripts (eg C Makefile)
* Maybe handle common extension points via external files:
	- for build systems Python script returning
		` build file (mimsy will watch for changes to this file)
		` targets
		` command lines for the targets
	- for tools declarative file with
		` regex for errors
		` regex for warnings
		` mapping from group number to standard categories like file, line, col
	- language files need to include search URL
	- would be nice to do something for SCCSs
* Language files should have support for a run key:
	- value is command line used to run a single file (or *.c file for C based languages)
	- probably triggered by option-R
	- will need to include this in shortcuts (could start this file before hooking it up)
	  or 'Run <Window Name>' menu command
	- need to hook into build error infrastructure
	- possibly also syntax check command
* May want a script/context menu to open github page associated with current file.
* Once we get Windows menu working better will probably want to add a Show Transcript menu item.
* Add support for snippets:
	- probably a directory with them
	- maybe sub-directories with each directory a language name
	- maybe context menu to insert
	- would be nice to be able to prompt for strings
	- might want to allow lua snippets for more logic
	- should be per language
	- maybe both text and script based (or possibly scripts are refactors)
* git modified file indicator is nice.
* Need to add support for a bunch more languages.
* Experiment with code folding:
	- need a language regex or string to indicate range start and end
	- probably want to just toggle folding on and off
	- doesn't appear to be a good way to do this just by mucking with visuals
	- one possibility is to switch to a 1pt font
	  would preserve line numbers and make it simple to do things like search or process the text
	- show range (eg for find) would need to auto-unfold
* Do something with the About box.
* The suggestions that XCode provides when there are errors are pretty cool.
* Might want to cache styles:
	- its fairly common to open and close large source files
	- probably want some logging for how large the cache gets
* Do something special with file rename when a SCCS is present. Also delete.
- maybe lua hooks
* Should have a mode where tab uses tab at the start of lines, but spaces once the line starts.
* Might also want to use that wacky VIM(?) meta-data embedded in files containing info like tab lengths
	- or support a dot file that does the same thing
* Might be cool to replace some strings on load/save:
	- -> and => to unicode arrows
	- :: to something
	- probably would also have to do this during editing
* Get searching in help files working.
* Info window should have a popup to override default styler file.
* Maybe could have an option to get rid of tabs altogether
	- tab adds enough spaces to offset to a modulo-N column
	- backspace gobbles N spaces where possible
	- would this work with proportional fonts?
	- optionally allow tabs at the start of lines
* Would be nice if there was a way to hide "chrome":
	- mostly helper windows, like find panels and recent files
	- maybe also directory windows
	- maybe all the chrome could be toggled via control key, then could use control-k to toggle chrome
* Is there an API to get reference docs from Apple?
	- from rust?
	- could add lua (or maybe arbotrary) per language scripts
	- could then do something like xcode's doc window
* Would be nice to have some sort of indication of dirty files:
	- probably from git's perspective
* XCode and (I guess) TextMate have a bunch of macros:
	- type some abreviation, hit escape, and they are expanded
* Might want to add to the app store:
	- see what the policy is for open source apps
	- look at Prepare for Mac App Store Submission link
* History of cursor positions?
* Release checklist:
	- review log topics
	- need to add a license agreement somewhere
	- might have to add a lame build step to archive build to copy the styles files a second time
	- make sure that the binary works on someone elses mac
	- increment support files version number, also build scripts version numbers
	- ship the release version
	
------------------------------------------------------------------------------------------------------------------------
#import "RegexStyler.h"

#import "Logger.h"
#import "StyleRuns.h"

@implementation RegexStyler
{
NSArray* _regexen;
NSArray* _names;
}

- (id)initWithRegexen:(NSArray*)regexen elementNames:(NSArray*)names
{
ASSERT(regexen.count >= names.count - 1);

_regexen = regexen;
_names = names;

return self;
}

// threaded
static int compareRun(const struct StyleRun* lhs, const struct StyleRun* rhs)
{
if (lhs->range.location < rhs->range.location)
return -1;
else if (lhs->range.location > rhs->range.location)
return -1;

if (lhs->range.length < rhs->range.length)
return -1;
else if (lhs->range.length > rhs->range.length)
return -1;

return 0;
}

// threaded
// Sets foundIndex if the run was found.
// Otherwise sets notFoundIndex to an index such that if the run was inserted there the runs will still be sorted.
// Adapted from http://rosettacode.org/wiki/Binary_search#C
static void findIntersectedRun(const struct StyleRunVector* runs, const struct StyleRun* run, NSUInteger* foundIndex, NSUInteger* notFoundIndex)
{
if (runs->count == 0) {
*notFoundIndex = 0;
return;
}

NSUInteger left = 1, right = runs->count; // `unsigned' to avoid overflow in `(left + right)/2'
while (left < right)
{
// invariant: a[left] <= *run <= a[right] or *run not in runs
NSUInteger m = (left  +  right) / 2; //NOTE: *intentionally* truncate for odd sum

if (compareRun(runs->data + m, run) < 0)
left = m + 1;       // a[m] < *run <= a[right] or *run not in runs
else
// assert(right != m) or infinite loop possible
right = m;          // a[left] <= *run <= a[m] or *run not in runs
}
// assert(left == right)
if (compareRun(runs->data + right, run) == 0)
*foundIndex = right;
else
*notFoundIndex = right;
}

static bool intersects(const struct StyleRun* lhs, const struct StyleRun* rhs)
{

}

// threaded
- (StyleRuns*)computeStyles:(NSString*)text editCount:(NSUInteger)count
{
__block struct StyleRunVector runs = newStyleRunVector();
reserveStyleRunVector(&runs, 2*text.length/40);	// this is how many runs I had in a screen of random rust code (x2 because of Normal runs)

for (NSUInteger i = 0; i < _regexen.count; ++i)
{
NSRegularExpression* re = _regexen[i];
[self _matchRegex:re runs:&runs index:i text:text];
}

[self _insertNormalStyles:&runs];

return [[StyleRuns alloc] initWithElementNames:_names runs:runs editCount:count];
}

// threaded
- (void) _matchRegex:(NSRegularExpression*)re runs:(struct StyleRunVector*)runs index:(NSUInteger)index text:(NSString*)text
{
[re enumerateMatchesInString:text options:0 range:NSMakeRange(0, text.length) usingBlock:
^(NSTextCheckingResult* match, NSMatchingFlags flags, BOOL* stop)
{
(void) flags;
(void) stop;

// TODO: do nothing if the range intersects an existing run
NSRange range = re.numberOfCaptureGroups == 0 ? [match rangeAtIndex:0] : [match rangeAtIndex:1];
struct StyleRun run = {.elementIndex = index+1, .range = range};

NSUInteger foundIndex = INT_MAX;
NSUInteger notFoundIndex = INT_MAX;
findIntersectedRun(runs, &run, &foundIndex, &notFoundIndex);
if (foundIndex != INT_MAX && !intersects(&runs->data[foundIndex], &run))
pushStyleRunVector(runs, run);
else if (notFoundIndex != INT_MAX && !intersects(&runs->data[notFoundIndex - 1], &run))
pushStyleRunVector(runs, run);
}
];
}

// threaded
- (void) _insertNormalStyles:(struct StyleRunVector*)runs
{





if (index < NSIntegerMax)
{
if (range.location > lastMatch)
pushStyleRunVector(&runs, (struct StyleRun) {.elementIndex = 0, .range = NSMakeRange(lastMatch, range.location - lastMatch)});

pushStyleRunVector(&runs, (struct StyleRun) {.elementIndex = index, .range = range});
lastMatch = range.location + range.length;
}
}
}

@end

