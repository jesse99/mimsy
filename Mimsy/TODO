* Get first cut at language styles working:
	- work on Languages
	- work on Styler

	- use a blocking function to map keywords to style names
	- map the style names to hard-coded attribute styles
	- styles should be applied based on distance from view center
		` maybe in a chunked fashion using a main thread queue
		`can't change attribute values once they have been applied
			pref modifications or style name swicthing should create new attributes
		` use beginEditing and endEditing when applying attributes
	- scroll to saved position after styles are applied
	  but don't scroll if the user has already scrolled
	- cache styles for files (use a pretty large cache, maybe 100 files)
	  might want some sort of cache size logging, maybe when various threasholds are breached
* Work on styling:
	- use regexen for the elements
		` NSRegularExpression has issues with its API, have to be very careful or it will throw?
		` PCRE which has lots of features
		` Oniguruma which is fairly light weight
	- add mimsy language
	- support ConditionalGLob
		` value is glob, space, regex
		` may appear more than once
		` see /usr/share/vim/vim73/filetype.vim
	- maybe Lua can be used for config (and other stuff)
		` http://playcontrol.net/opensource/LuaCocoa/
		` do we really need a scripting bridge?
		` http://www.rogerboesch.com/2010/11/22/lightweight-integration-of-lua-in-objective-c/
		` http://stackoverflow.com/questions/8477218/building-a-simple-bridge-between-objc-and-lua
	- get color files working
		` probably want to add some of the VIM groups, 
		  see http://vimdoc.sourceforge.net/htmldoc/syntax.html NAMING CONVENTIONS
	- add some VIM style color files, vimcolorschemetest.googlecode.com
	- should be a way to include back color in the style file
		` probably need some way to override default back color 
	- add some sort of search key
		- can appear multiple times
		- augments context menu
	- add a vim language
	- install language files from the bundle to ~/Preferences
	- add a pref for extensions to languages
	- make sure pref has a button to open the dir with the vim files
	- may be able to do something with NSLinkAttributeName
* Need a menu item to remove styles.
* Add context specific help:
	- probably rtf files
	- use generic help if no windows are up (or its selected from the help menu)
	  mention that help files can be edited by the user (will need to install them)
	- language files need help key with a path to a file
	- open all help files (except generic) relevant to the current context
	- for find could document most common regex options and link to more complete reference
	- mimsy files could also show regex help file (maybe via a ConditionalHelp key)
* Add an icon.
* Language files should have support for a run key:
	- value is command line used to run a single file (or *.c file for C based languages)
	- probably triggered by option-R
	- will need to include this in shortcuts (could start this file before hooking it up)
	- possibly also syntax check command
* On startup need to install new files:
	- use a manifest.minsy file in support files
	- has (support files) version number and key/values for files/md5sums (probably need relative paths)
	- on startup thread is used to update old files or add new files
	- if hard-coded version matches version in manifest early exit
	- if installed file md5sum does not match package file md5sum then
		` if installed file md5sum matches the manifest sum then overwrite
		` else add *.new.* file
	- files in package but not installed are installed
	- files installed but not in package are reported
	- manifest md5sum can be 'ignore' to cause package file to not be installed
	- when done write and open a report to application support
		` include a note that the file can be removed
		` include a timestamp
		` include details on what happened with most important first (eg *.new.* files)
		` probably rtf file
	- probably want an install.rtf help file
		` talk about how this works
		` frequently used configuration options
		` installing command line tool
		` uninstall
* Context menu should maybe use a hueristic to add open (local) files based on selection name.
* Add directory document:
	- use WindowDatabase
	- return should do an open
* Might want Run and Test commands (run different targets).
* Build menu should reload if build file changes.
* Maybe control-1 and control-2 windows should auto-hide.
* Provide some sort of quick reference feature:
	- file with a list of urls/paths
	- probably a File sub-menu
	- maybe Mimsy style config file (so we can have better menu item titles)
* NSLayoutManager has methods for underlining and striking through character ranges.
* Would be nice to have a way to create new files:
	- option-N pops up a list users can choose from
	- remember last selection
	- probably mustache (and maybe also arbitrary scripts)
	- mustache could have templates for things like user name, year, maybe custom settings
	- scripts could have a mode to tell mimsy what they need (eg class name)
	- could do similar thing to support inserting language elements
	- may want a way to disable these, maybe it is present but ignored if wrapped in parens
	- could include build scripts (eg C Makefile)
* Maybe handle common extension points via external files:
	- for build systems Python script returning
		` build file (mimsy will watch for changes to this file)
		` targets
		` command lines for the targets
	- for tools declarative file with
		` regex for errors
		` regex for warnings
		` mapping from group number to standard categories like file, line, col
	- language files need to include search URL
	- would be nice to do something for SCCSs
* Work on directory editor.
* git modified file indicator is nice.
* Do something with the About box.
* The suggestions that XCode provides when there are errors are pretty cool.
* Do something special with file rename when a SCCS is present.
* Would be nice to have some better logging:
	- http://boredzo.org/blog/archives/2008-01-20/asl-logging
* Should have a mode where tab uses tab at the start of lines, but spaces once the line starts.
* Might also want to use that wacky VIM(?) meta-data embedded in files containing info like tab lengths
	- or support a dot file that does the same thing
* Work on building:
	- might be able to use vim files, eg /usr/share/vim/vim73/compiler/gcc.vim
* Might be cool to replace some strings on load/save:
	- -> and => to unicode arrows
	- :: to something
	- probably would also have to do this during editing
* Make sure builds call reloadIfChanged
* Maybe could have an option to get rid of tabs altogether
	- tab adds enough spaces to offset to a modulo-N column
	- backspace gobbles N spaces where possible
	- would this work with proportional fonts?
	- optionally allow tabs at the start of lines
* Can we support references somehow?
	- ideally per language
* Maybe also a short view:
	- remove function bodies
	- possibly format doc comments
* Would be nice to have some sort of indication of dirty files:
	- probably from git's perspective
* XCode and (I guess) TextMate have a bunch of macros:
	- type some abreviation, hit escape, and they are expanded
* Might want to add to the app store:
	- see what the policy is for open source apps
	- look at Prepare for Mac App Store Submission link
* Support named bookmarks.
* History of cursor positions?
* Release checklist:
	- increment support files version number
	- probably want to enable asserts in release
	
	