* Work on context menus:
	- support time machine
	- support word wrapping
	- support copy path
	- support show in finder
	- may want some language dependent scripts, eg for Python

	- build menu using observer pattern
	- observers should register with app delegate?
	- observer data includes info about text view and selection
	  maybe also language
	- one observer uses transforms scripts directory
	- support spell checking
	- would be nice to also have global spell checking
	- may also want some sort of hook for lua scripts
	- add time machine support
	- transcript needs a clear window context command
* Need to special case double-click selections according to the language
	- eg most languages should not treat period as a word
* Should there be scripts associated with directory windows?
	- copy and rename?
	- add C file?
	- git helpers?
	- diff?
* Would be great if there was a way to skip backward and forward between selections.
	- xcode uses command-control left and right arrows
* Jump to selection would also be nice
* Some sort of placeholder support would be nice too:
	- maybe something like a bookmarks window
* Work on find
	- would be nice if there was a simple way to remove find in files directories
* Can we add some sort of subtle highlight for the area between the current brackets?
	- rainbow?
	- only mismatched?
	- use a script?
* Would be nice if Mimsy had something to enforce 80 char lines.
* Could add some simple finf definition support by relying on the styler:
	- maybe also support paths to library files
	- might be a bit problematic for languages with overloading
	- may want to mention in docs that definition style serves two purposes
* Support remote editing
	- might be simplest to just have a Python script running remotely
	- contents could be zipped and binhexed
* Update xcode
	- see whats changed in cocoa
* Might be neat to have a small font bace line addon.
* Make sure directory window shows the mimsy file
	- may want a setting for files to always show
	- or a setting for files to hide?
* Get builds working:
	- probably want project settings file to have target black list
	- support build variables
		do builders really need to provide this?
		can't the settings file just list env vars to set?
	- implement a waf builder
	- maybe an xcode builder
* Add support for extracting error info from tools	
	should use settings files (or maybe lua scripts)
	build docs should probably reference this
	look at VIM: /usr/share/vim/vim73/compiler/gcc.vim
	error formats use scanf syntax
	        %f              file name (finds a string)
	        %l              line number (finds a number)
	        %c              column number (finds a number representing character
	                        column of the error, (1 <tab> == 1 character column))
	        %v              virtual column number (finds a number representing
	                        screen column of the error (1 <tab> == 8 screen
	                        columns))
	        %t              error type (finds a single character)
	        %n              error number (finds a number)
	        %m              error message (finds a string)
	        %r              matches the "rest" of a single-line file message %O/P/Q
	        %p              pointer line (finds a sequence of '-', '.' or ' ' and
	                        uses the length for the column number)
	        %*{conv}        any scanf non-assignable conversion
	        %%              the single '%' character
	        %s              search text (finds a string)
	        see :help errorformat
	        http://vim.wikia.com/wiki/Errorformats
	builds need to call reloadIfChanged
	build menu should rebuild if the dir changes
* Maybe can use rustc --parse-syntax in a script to highlight errors
* Might want Run and Test commands (run different targets).
* Build menu should reload if build file changes.
* Work on building:
	- might be able to use vim files, eg /usr/share/vim/vim73/compiler/gcc.vim
* Make sure builds call reloadIfChanged
* Should have some sort of field to use when toggling between header and C files:
	- maybe also stuff like .html and .css and .js
* Work on styling:
	- add some sort of search key
		can appear multiple times
		augments context menu
		will need to bump build number
	- add a pref for extensions to languages
	- make sure pref has a button to open the dir with the vim files
	- may be able to do something with NSLinkAttributeName
	- probably should have a way to have fallback element name aliases
	- would be nice if there was a way to show which elements text ranges belong to
		could do this by adding a "style name" attribute
* Get find working
* Get find in files working
* Work on directory window hooks:
	- styling
	- text annotations
	- context menu
	- tooltips (NSOutlineView has support for these)
* Would be neat to have a script to highlight commonly used files:
	- maybe add bullets to the name
	- last N most recently used? quartiles?
	- credit don
* Context menu should maybe use a hueristic to add open (local) files based on selection name:
	- maybe also scripts to update context menu using function and type info from styling or parsing
* Open selection should be able to open directories.
* Would be nice to have a way to create new files:
	- option-N pops up a list users can choose from
	- remember last selection
	- probably mustache (and maybe also arbitrary scripts)
	- mustache could have templates for things like user name, year, maybe custom settings
	- scripts could have a mode to tell mimsy what they need (eg class name)
	- could do similar thing to support inserting language elements
	- may want a way to disable these, maybe it is present but ignored if wrapped in parens
	- could include build scripts (eg C Makefile)
* Maybe handle common extension points via external files:
	- for build systems Python script returning
		` build file (mimsy will watch for changes to this file)
		` targets
		` command lines for the targets
	- for tools declarative file with
		` regex for errors
		` regex for warnings
		` mapping from group number to standard categories like file, line, col
	- language files need to include search URL
	- would be nice to do something for SCCSs
* Would be nice to have a script to warn when lines are over 78 chars
	- probably disabled by default
	- or do nothing unless a setting is set
	- directory settings file would need entries for custom settings
* Language files should have support for a run key:
	- value is command line used to run a single file (or *.c file for C based languages)
	- probably triggered by option-R
	- will need to include this in shortcuts (could start this file before hooking it up)
	  or 'Run <Window Name>' menu command
	- need to hook into build error infrastructure
	- possibly also syntax check command
* May want a script/context menu to open github page associated with current file.
* Once we get Windows menu working better will probably want to add a Show Transcript menu item.
* Add support for snippets:
	- probably a directory with them
	- maybe sub-directories with each directory a language name
	- maybe context menu to insert
	- would be nice to be able to prompt for strings
	- might want to allow lua snippets for more logic
	- should be per language
	- maybe both text and script based (or possibly scripts are refactors)
* git modified file indicator is nice.
* Could use styler to support jump to definition:
	- directory watcher and a task are used to maintain a cache
	- project pref could have paths to dependencies
	- lua hooks could allow for more sophisticated implementations (eg for clang)
* Need to add support for a bunch more languages.
* Experiment with code folding:
	- need a language regex or string to indicate range start and end
	- probably want to just toggle folding on and off
	- doesn't appear to be a good way to do this just by mucking with visuals
	- one possibility is to switch to a 1pt font
	  would preserve line numbers and make it simple to do things like search or process the text
	- show range (eg for find) would need to auto-unfold
* Do something with the About box.
* The suggestions that XCode provides when there are errors are pretty cool.
* Might want to cache styles:
	- its fairly common to open and close large source files
	- probably want some logging for how large the cache gets
* Do something special with file rename when a SCCS is present. Also delete.
* Should have a mode where tab uses tab at the start of lines, but spaces once the line starts.
* Might also want to use that wacky VIM(?) meta-data embedded in files containing info like tab lengths
	- or support a dot file that does the same thing
* Might be cool to replace some strings on load/save:
	- -> and => to unicode arrows
	- :: to something
	- probably would also have to do this during editing
* Find in files needs to be able to search rtf files.
* Get searching in help files working.
* Info window should have a popup to override default styler file.
* Maybe could have an option to get rid of tabs altogether
	- tab adds enough spaces to offset to a modulo-N column
	- backspace gobbles N spaces where possible
	- would this work with proportional fonts?
	- optionally allow tabs at the start of lines
* Would be nice if there was a way to hide "chrome":
	- mostly helper windows, like find panels and recent files
	- maybe also directory windows
	- maybe all the chrome could be toggled via control key, then could use control-k to toggle chrome
* Can we support references somehow?
	- ideally per language
* Maybe also a short view:
	- remove function bodies
	- possibly format doc comments
* Would be cool if there was a way to configure command keys:
	- maybe mimsy file or lua script
* Would be nice to have some sort of indication of dirty files:
	- probably from git's perspective
* XCode and (I guess) TextMate have a bunch of macros:
	- type some abreviation, hit escape, and they are expanded
* Might want to add to the app store:
	- see what the policy is for open source apps
	- look at Prepare for Mac App Store Submission link
* Support named bookmarks.
* Could replace Mimsy files with lua config files:
	- regex would be a little annoying, probably would need to use long brackets to avoid escaping
	- maybe a little annoying to edit too: lua is simple but not as simple as the Mimsy format
* History of cursor positions?
* Release checklist:
	- review log topics
	- need to add a license agreement somewhere
	- might have to add a lame build step to archive build to copy the styles files a second time
	- make sure that the binary works on someone elses mac
	- increment support files version number, also build scripts version numbers
	- ship the release version
	
	
	