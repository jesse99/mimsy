Language: c++
Globs: *.cpp *.hpp *.cxx *.cc *.hxx algorithm bitset cassert cctype cerrno cfloat ciso646 climits clocale cmath complex csetjmp csignal cstdarg cstddef cstdio cstdlib cstring ctime cwchar cwctype cxxabi.h deque exception fstream functional iomanip ios iosfwd iostream istream iterator limits list locale map memory new numeric ostream queue set sstream stack stdexcept streambuf string typeinfo utility valarray vector
ConditionalGlob: *.h (std::) | (public:) | (virtual) | (^ \s* \x23 \s* include \s+ < \w+ >)
Word: [a-zA-Z_~][a-zA-Z0-9_]*
LineComment: //
ContextHelp: {c++}[C++ Library]http://www.cplusplus.com/reference/
ContextHelp: {c++}[C++ Language]http://msdn.microsoft.com/en-us/library/3bstk3k5.aspx
SearchIn: [cplusplus]http://www.cplusplus.com/search.do?q=${TEXT}&kwr=no

Comment: // .* $
Comment: /\* (?: . | \r | \n)*? \*/
Conditional: \b(?: case | else | if | switch)\b
Exception: \b(?: catch | throw | try)\b
Keyword: \b(?: break | const | continue | default | enum | goto | return | struct | typedef | union | asm | class | const_cast | constexpr | decltype | delete | dynamic_cast | friend | namespace | new | nullptr | operator | private | protected | public | reinterpret_cast | static_assert | static_cast | template | this | typeid | typename | using | NULL)\b
Operator: \b(?: sizeof)\b
Repeat: \b(?: do | for | while)\b
StorageClass: \b(?: auto | extern | register | static | volatile | explicit | inline | mutable | virtual)\b
Type: \b(?: char | double | float | int | long | short | signed | unsigned | void | bool | wchar_t | list | map | multi_map | multi_set | set | std | string | vector)\b
Macro: \b(?: __FILE__ | __LINE__ | __DATE__ | __TIME__ | __STDC__ | __STDC_VERSION__ | __STDC_HOSTED__ | __OBJC__ | __ASSEMBLER__ | __COUNTER__ | __GFORTRAN__ | __GNUC__ | __GNUC_MINOR__ | __GNUC_PATCHLEVEL__ | __GNUG__ | __STRICT_ANSI__ | __BASE_FILE__ | __INCLUDE_LEVEL__ | __ELF__ | __VERSION__ | __OPTIMIZE__ | __OPTIMIZE_SIZE__ | __NO_INLINE__ | __GNUC_GNU_INLINE__ | __GNUC_STDC_INLINE__ | __CHAR_UNSIGNED__ | __WCHAR_UNSIGNED__ | __REGISTER_PREFIX__ | __USER_LABEL_PREFIX__ | __SIZE_TYPE__ | __PTRDIFF_TYPE__ | __WCHAR_TYPE__ | __WINT_TYPE__ | __INTMAX_TYPE__ | __UINTMAX_TYPE__ | __SIG_ATOMIC_TYPE__ | __INT8_TYPE__ | __INT16_TYPE__ | __INT32_TYPE__ | __INT64_TYPE__ | __UINT8_TYPE__ | __UINT16_TYPE__ | __UINT32_TYPE__ | __UINT64_TYPE__ | __INT_LEAST8_TYPE__ | __INT_LEAST16_TYPE__ | __INT_LEAST32_TYPE__ | __INT_LEAST64_TYPE__ | __UINT_LEAST8_TYPE__ | __UINT_LEAST16_TYPE__ | __UINT_LEAST32_TYPE__ | __UINT_LEAST64_TYPE__ | __INT_FAST8_TYPE__ | __INT_FAST16_TYPE__ | __INT_FAST32_TYPE__ | __INT_FAST64_TYPE__ | __UINT_FAST8_TYPE__ | __UINT_FAST16_TYPE__ | __UINT_FAST32_TYPE__ | __UINT_FAST64_TYPE__ | __INTPTR_TYPE__ | __UINTPTR_TYPE__ | __CHAR_BIT__ | __SCHAR_MAX__ | __WCHAR_MAX__ | __SHRT_MAX__ | __INT_MAX__ | __LONG_MAX__ | __LONG_LONG_MAX__ | __WINT_MAX__ | __SIZE_MAX__ | __PTRDIFF_MAX__ | __INTMAX_MAX__ | __UINTMAX_MAX__ | __SIG_ATOMIC_MAX__ | __INT8_MAX__ | __INT16_MAX__ | __INT32_MAX__ | __INT64_MAX__ | __UINT8_MAX__ | __UINT16_MAX__ | __UINT32_MAX__ | __UINT64_MAX__ | __INT_LEAST8_MAX__ | __INT_LEAST16_MAX__ | __INT_LEAST32_MAX__ | __INT_LEAST64_MAX__ | __UINT_LEAST8_MAX__ | __UINT_LEAST16_MAX__ | __UINT_LEAST32_MAX__ | __UINT_LEAST64_MAX__ | __INT_FAST8_MAX__ | __INT_FAST16_MAX__ | __INT_FAST32_MAX__ | __INT_FAST64_MAX__ | __UINT_FAST8_MAX__ | __UINT_FAST16_MAX__ | __UINT_FAST32_MAX__ | __UINT_FAST64_MAX__ | __INTPTR_MAX__ | __UINTPTR_MAX__ | __WCHAR_MIN__ | __WINT_MIN__ | __SIG_ATOMIC_MIN__ | __INT8_C | __INT16_C | __INT32_C | __INT64_C | __UINT8_C | __UINT16_C | __UINT32_C | __UINT64_C | __INTMAX_C | __UINTMAX_C | __SIZEOF_INT__ | __SIZEOF_LONG__ | __SIZEOF_LONG_LONG__ | __SIZEOF_SHORT__ | __SIZEOF_POINTER__ | __SIZEOF_FLOAT__ | __SIZEOF_DOUBLE__ | __SIZEOF_LONG_DOUBLE__ | __SIZEOF_SIZE_T__ | __SIZEOF_WCHAR_T__ | __SIZEOF_WINT_T__ | __SIZEOF_PTRDIFF_T__ | __BYTE_ORDER__ | __ORDER_LITTLE_ENDIAN__ | __ORDER_BIG_ENDIAN__ | __ORDER_PDP_ENDIAN__ | __BYTE_ORDER__ | __FLOAT_WORD_ORDER__ | __FLOAT_WORD_ORDER__ | __DEPRECATED | __EXCEPTIONS | __GXX_RTTI | __USING_SJLJ_EXCEPTIONS__ | __GXX_EXPERIMENTAL_CXX0X__ | __GXX_WEAK__ | __NEXT_RUNTIME__ | __LP64__ | _LP64 | __SSP__ | __SSP_ALL__ | __SANITIZE_ADDRESS__ | __TIMESTAMP__ | __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 | __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 | __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 | __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 | __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 | __GCC_HAVE_DWARF2_CFI_ASM | __FP_FAST_FMA | __FP_FAST_FMAF | __FP_FAST_FMAL)\b

Boolean: \b(?: false | true)\b
Identifier: \b [a-zA-Z_] [\w_]* \b

String: " (?: [^"\r\n\\] | \\.)* "
Character: ' (?: [^'\r\n\\] | \\.)* '
String: (?<= \x23 include) \s+ (< (?: [^>\r\n\\] | \\.)* >)

Float: (\d+ \. [\d_]+ (?: [eE] [+-]? [\d_]+)? [fFlL]?)
Float: (\. [\d_]+ (?: [eE] [+-]? [\d_]+)? [fFlL]?)
Number: (\d+ (?: [luLU]{0, 2}))
Number: (0x [0-9a-fA-f]+ (?: [luLU]{0, 2}))

PreProc: \x23 \s* (?: define | undef) .* $
PreProc: \x23 \s* (?: warning | error | line | pragma)
PreCondit: \x23 \s* (?: ifdef | ifndef | if | else | elif | endif) .* $
Include: \x23 \s* include
